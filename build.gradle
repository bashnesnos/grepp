import java.text.SimpleDateFormat

apply plugin: 'groovy'
apply plugin: 'application'

version = '2.0'
def targetDir = new File("grepp") //default install dir path prefix

def curJre = System.properties['java.version']
//org.gradle.project.jdk - e.g. 1.6 - populate if app is going to be ran on JRE older than yours. Works on 1.5
//org.gradle.project.jreLibPath - e.g. D:\Alex\jdk1.6.0_26\jre\lib - populate if app is going to be ran on JRE older than yours. Used to set bootclasspath
//org.gradle.project.printTestClasspath -e.g. true - prints test classpath if true

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.slf4j', name:'slf4j-api', version: '1.7.6'
    compile group: 'ch.qos.logback', name:'logback-classic', version: '1.1.1'
    compile group: 'commons-cli', name:'commons-cli', version: '1.2'

    if (curJre =~ /1.5/ || (project.hasProperty('jdk') && jdk =~ /1.5/)) {
        compile group: 'org.livetribe', name:'livetribe-jsr223', version: '2.0.1', transitive: true //for 1.5 compatibility
        compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.2.2'
        testCompile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.2.2'
    }
    else if (curJre =~ /1.7/ || (project.hasProperty('jdk') && jdk =~ /1.7/)) { //-indy doesn't really work properly on jre1.8
        compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.2.2', classifier: 'indy'
        testCompile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.2.2', classifier: 'indy'
    }
    else { //works with 1.6, 1.7, 1.8
        compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.2.2'
        testCompile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.2.2'
    }
    
    testCompile group: 'junit', name: 'junit', version: '4.10'
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}

compileGroovy {
    if (project.hasProperty('jdk') && !(curJre =~ jdk)) {
        if (!project.hasProperty('jreLibPath')) {
            throw new InvalidUserDataException("You should supply a jre lib path if the desired jdk ($jdk) is not the same as the current ($curJre)") 
        }

        println "Building grepp for $jdk"

        sourceCompatibility = jdk
        targetCompatibility = jdk
        options.fork = true
        options.bootClasspath = jreLibPath + "\\rt.jar"
    }
    else {
        println "Building grepp for the current $curJre"
    }
}

startScripts {
    mainClassName = 'org.smltools.grepp.cli.Grepp'
    classpath += files('/config')

    doLast {
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile    = file getUnixScript()
        windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\\lib\\config', '%APP_HOME%\\config')
        windowsScriptFile.text = windowsScriptFile.text.replace('set APP_HOME=%DIRNAME%..', 'set APP_HOME=%DIRNAME%..\nset GREPP_OPTS="-Dgrepp.home=%APP_HOME%"')
        unixScriptFile.text    = unixScriptFile.text.replace('$APP_HOME/lib/config', '$APP_HOME/config')
        unixScriptFile.text    = unixScriptFile.text.replace('APP_HOME="`pwd -P`"', 'APP_HOME="`pwd -P`"\nGREPP_OPTS="-Dgrepp.home=$APP_HOME"')
    }

}

sourceSets {
	sourceSets.main.groovy.srcDir 'src/main/java' //compiling java with groovy since classes are coupled
}

jar.includes =['**/*.class'] //TODO: may be versioning or something is needed 
jar.includeEmptyDirs = false

test {
	systemProperty 'grepp.home', rootDir.getAbsolutePath() + '/build/resources/test'
    systemProperty 'grepp.config', rootDir.getAbsolutePath() + '/build/resources/test/config/config.groovy'
	def newCP = getClasspath() + project.files(rootDir.getAbsolutePath() + '/build/resources/test/config')
	setClasspath(newCP)
    if (project.hasProperty('printTestClasspath') && printTestClasspath) {
        newCP.getFiles().each {print it.getCanonicalPath() + ";"}
    }
}

processTestResources {
    def dateFormat = new SimpleDateFormat('yyyy-MM-dd HH')
    def curDate = new Date()
    filter { String line ->
            line.replace('#TEST_TIME_FROM#', dateFormat.format(curDate))
                .replace('#TEST_TIME_TO#', dateFormat.format(new Date(curDate.getTime() + 60*60*1000)))
                .replace('#TEST_TIME_TOO_FAR#', dateFormat.format(new Date(curDate.getTime() + 3*60*60*1000)))
    }   
}


task cleanSubProject(type: Delete){

}

task prepareSublimeSettings(type: Copy) {
    from rootDir.getAbsolutePath() + '/src/sublime/'
    filter { String line ->
        line.replace('#GREPP_HOME#', rootDir.getAbsolutePath().replaceAll( '(\\\\)', '\\\\$1' ))
    }
    into mkdir('.sublime')
}

task copyToIvy(type: Copy) {
    from jar
    new File('C:\\Users\\asemelit\\.grails\\ivy-cache\\org.smltools').deleteDir()
    into 'C:\\Users\\asemelit\\Documents\\GitHub\\grepp-server\\lib'
}

tasks.addRule("Pattern: install<ID>") { String taskName ->
    if (taskName.startsWith("install"))
    {
        def installDir = new File(targetDir.getAbsolutePath() + 'Install')
        installApp.destinationDir = installDir
        applicationDistribution.from(processResources) {
            includeEmptyDirs = false
        }

        cleanSubProject.delete fileTree(installDir.getAbsolutePath())
        clean.dependsOn(':cleanSubProject')
        task(taskName, dependsOn: ':installApp') << {
        }   
    }
}