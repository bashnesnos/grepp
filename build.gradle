import groovy.xml.DOMBuilder
import groovy.xml.dom.DOMCategory
import groovy.xml.XmlUtil
import java.text.SimpleDateFormat

apply plugin: 'groovy'

//these properties are overwritten by subprojects dev, stable and release if they are defined there
def targetDir = null //is initialized with the project
    def makeExecsFileWriter = null //is initialized with the project
def tmplt_suffix = ''
def doZip = false
def params = [:]
def embedded = true //flag to embedd groovy-all into wgrep.jar

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.0.6'
	compile group: 'org.slf4j', name:'slf4j-api', version: '1.7.5'
	compile group: 'ch.qos.logback', name:'logback-classic', version: '1.0.11'
	compile group: 'org.livetribe', name:'livetribe-jsr223', version: '2.0.1', transitive: true //for 1.5 compatibility

    testCompile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.0.6'
	testCompile group: 'junit', name: 'junit', version: '4.10'
}

jar {
	//'Quick packaging'
}

test {
	systemProperty 'wgrep.home', rootDir.getAbsolutePath()
	def newCP = getClasspath() + project.files(rootDir.getAbsolutePath() + '/build/resources/main')
	setClasspath(newCP)
}

processTestResources {
    def dateFormat = new SimpleDateFormat('yyyy-MM-dd')
    filter { String line ->
        line.replace('#TEST_TIME#', dateFormat.format(new Date()))
    }   
    doLast {
        def cfgDoc = DOMBuilder.parse(new FileReader(rootDir.getAbsolutePath() + '/build/resources/main/config.xml'))
        def customDoc = DOMBuilder.parse(new FileReader(rootDir.getAbsolutePath() + '/build/resources/test/config.custom'))
        def root = cfgDoc.documentElement
        use(DOMCategory) {
            root.appendChild(cfgDoc.importNode(customDoc.documentElement.custom[0], true))
        }
        cfgDoc.normalizeDocument()
        XmlUtil.serialize(root, new FileWriter(rootDir.getAbsolutePath() + '/build/resources/test/config.xml'))
    }
}

task makeEmbeddedJar(dependsOn: build, type: Jar) {
	//'Groovy embedded packaging'
	from rootDir.getAbsolutePath() + '/build/classes/main'
	from { 
		configurations.compile.collect {it.isDirectory()? it : zipTree(it)} 
	}
}

task cleanSubProject(type: Delete){

}

task copyBuild(type: Copy) {
    from(rootDir.getAbsolutePath() + '/build/resources/main'){
        exclude '**/*_tmplt'
    }
    from rootDir.getAbsolutePath() + '/build/libs'
}

task transformConfig(dependsOn: copyBuild){
    doLast {
        def cfgDoc = DOMBuilder.parse(new FileReader(targetDir.getAbsolutePath() + '/config.xml'))
        def customDoc = DOMBuilder.parse(new FileReader(targetDir.getAbsolutePath() + '/config.custom'))
        def root = cfgDoc.documentElement
        use(DOMCategory) {
            root.appendChild(cfgDoc.importNode(customDoc.documentElement.custom[0], true))
        }
        cfgDoc.normalizeDocument()
        XmlUtil.serialize(root, new FileWriter(targetDir.getAbsolutePath() + '/config.xml'))
    }
}

task transformTmplts(dependsOn: transformConfig, type: Copy) {
    from(rootDir.getAbsolutePath() + '/build/resources/main/')  {
        include '**/*_tmplt'
    }

    eachFile { FileCopyDetails elem ->
        def file = elem.getFile()
        
        def onlyName = (file.getName() =~ /.*(?=\.)/)[0]
        def tFileName = file.getName().replace(onlyName, onlyName + tmplt_suffix).replace('_tmplt','')
        elem.setName(tFileName)

        if (tFileName =~ /\.sh/) {
            if (!makeExecsFileWriter) {
                makeExecsFileWriter = new FileWriter(destinationDir.getAbsolutePath() + '/make_execs.sh', true) //appending to make_execs.sh    
            }
            makeExecsFileWriter.write('\nchmod +x ' + elem.getPath())   
        }

        elem.filter { String line ->
            def newLine = line
            for (param in params.keySet()) {
                if (line =~ /$param/) newLine = newLine.replace(param, params[param])
            }
            newLine
        }
    }

    doLast{
        if (makeExecsFileWriter) {
            makeExecsFileWriter.flush()
            makeExecsFileWriter.close()
        }
    }
}

task prepareSublimeSettings(type: Copy) {
    from rootDir.getAbsolutePath() + '/src/sublime/'
    filter { String line ->
        line.replace('#WGREP_HOME#', rootDir.getAbsolutePath().replaceAll( '(\\\\)', '\\\\$1' ))
    }
    into mkdir('.sublime')
}

task makeZip(type:Zip) {

}

tasks.addRule("Pattern: release<ID>") { String taskName ->
	if (taskName.startsWith("release"))
	{
		def subProject = null
        if (taskName =~ /Dev/) {
            subProject = project(':dev')
		}
        else if (taskName ==~ /release/) {
            subProject = project(':release')

        }
        
        if (subProject)
        {

            embedded = subProject.hasProperty('embedded') ? subProject.embedded : embedded
            targetDir = subProject.hasProperty('targetDir') ? subProject.targetDir : targetDir
            tmplt_suffix = subProject.hasProperty('tmplt_suffix') ? subProject.tmplt_suffix : tmplt_suffix
            doZip = subProject.hasProperty('doZip') ? subProject.doZip : doZip
            params = subProject.hasProperty('params') ? subProject.params : params

            copyBuild.into targetDir
            transformTmplts.into targetDir

            cleanSubProject.delete fileTree(targetDir.getAbsolutePath()){
                exclude '*gradle*'
                exclude '*custom*'
            }   
            clean.dependsOn(':cleanSubProject')


            if (embedded) copyBuild.dependsOn(':makeEmbeddedJar')
            else copyBuild.dependsOn(':build')

            if (doZip) {
                makeZip.from(targetDir) {
                    exclude '*gradle*'
                    exclude '*custom*'
                }
                makeZip.dependsOn(':transformTmplts')
                task(taskName, dependsOn: ':makeZip') << {

                }
            }
            else
            {
                task(taskName, dependsOn: ':transformTmplts') << {

                }   
            }
        }

	}
}